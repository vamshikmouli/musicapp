datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}
 
generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  ADMIN
  STAFF
  PARENT
  SCHOOL
}
 
model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  hashPassword  String?
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  role          UserRole?        @default(ADMIN)
  // Optional for WebAuthn support
  Authenticator Authenticator[]
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}
 
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}
 
// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([userId, credentialID])
}

model School {
  id        String    @id @default(cuid())
  name      String
  location  String?
  students  Student[]
  staff     Staff[]
}

model Staff {
  id        String    @id @default(cuid())
  name      String
  email     String    @unique
  schoolId  String
  school    School    @relation(fields: [schoolId], references: [id])
  students  Student[] @relation("StaffStudents")
}

model Student {
  id        String    @id @default(cuid())
  studentId String    @unique
  name      String
  schoolId  String
  school    School?    @relation(fields: [schoolId], references: [id])
  staff     Staff?    @relation("StaffStudents", fields: [staffId], references: [id])
  staffId   String?
  attendance Attendance[]
}

model Attendance {
  id         String    @id @default(cuid())
  studentId  String
  student    Student  @relation(fields: [studentId], references: [id])
  date       DateTime @default(now())
  status     String   @default("PRESENT")
}